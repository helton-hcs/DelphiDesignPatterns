unit DesignPatternsTests;

interface

uses
  Classes, SysUtils, TestFrameWork,
  SmartPointer,
  Strategy.Classes.Example1,
  Observer.Classes.Example1,
  Factory.Classes.Example1,
  Singleton.Classes.Example1,
  Decorator.Classes.Example1;

type
  TSmartPointerTest = class(TTestCase)
  published
    procedure TestSmartPointer;
  end;

  TStrategyExample1Test = class(TTestCase)
  private
    Pwd: TPassword;
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestStrategy;
  end;

  TObserverExample1Test = class(TTestCase)
  private
    YouTube: TYouTube;
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestObserver;
  end;

  TFactoryExample1Test = class(TTestCase)
  published
    procedure TestFactory;
  end;

  TSingletonTest = class(TTestCase)
  published
    procedure TestSingleton;
  end;

  TDecoratorExample1Test = class(TTestCase)
  published
    procedure TestDecoratorExample1;
  end;


implementation

uses
  IWTestFramework, Vcl.Dialogs, System.Generics.Collections;

{ TSmartPointerTest }

procedure TSmartPointerTest.TestSmartPointer;
var
  GenericList: TSmartPointer<TStringList>;
  List: TStringList;
begin
//  GenericList := TStringList.Create; { Unnecessary, but it's possible }
  CheckEquals(True, Assigned(GenericList.Instance), 'Error on check Assigned');
  GenericList.Instance.Add('Foo');
  GenericList.Instance.Add('Bar');
  CheckEquals('Foo', GenericList.Instance[0], 'Error on item 1');
  CheckEquals('Bar', GenericList.Instance[1], 'Error on item 2');
  GenericList.Instance.Add('Qux');
  CheckEquals('Qux', GenericList.Instance[2], 'Error on item 3');
  List := TStringList.Create;
  List.Add('1, 2, 3');
  GenericList := List;
  CheckEquals('1, 2, 3', GenericList.Instance[0], 'Error on pointer to "native" object');
  GenericList.Instance.Add('9, 8, 7');
  CheckEquals('9, 8, 7', List[1], 'Error on read values from "native" object');
//  List.Free; { Cannot free the variable List here 'cause its pointer is pointing to Generics.Instance }
end;

{ TSSStrategyTest }

procedure TStrategyExample1Test.SetUp;
begin
  inherited;
  Pwd := TPassword.Create('Helton');
end;

procedure TStrategyExample1Test.TearDown;
begin
  inherited;
  Pwd.Free;
end;

procedure TStrategyExample1Test.TestStrategy;
begin
  CheckEquals('Helton', Pwd.GetEncryptedKey, 'Error on encryption key - TSSNoEncryption [initialization]');
  CheckEquals('None encryption', Pwd.GetEncryptionId, 'Error on encryption id - TSSNoEncryption [initialization]');

  Pwd.Encryption := TEncryptionToUpper.Create;
  CheckEquals('HELTON', Pwd.GetEncryptedKey, 'Error on encryption key - TSSEncryptionToUpper');
  CheckEquals('ToUpper encryption', Pwd.GetEncryptionId, 'Error on encryption id - TSSEncryptionToUpper');

  Pwd.Encryption := TEncryptionToLower.Create;
  CheckEquals('helton', Pwd.GetEncryptedKey, 'Error on encryption key - TSSEncryptionToLower');
  CheckEquals('ToLower encryption' ,Pwd.GetEncryptionId, 'Error on encryption id - TSSEncryptionToLower');
end;

{ TSSObserverTest }

procedure TObserverExample1Test.SetUp;
begin
  inherited;
  YouTube := TYouTube.Create;
end;

procedure TObserverExample1Test.TearDown;
begin
  inherited;
  FreeAndNil(YouTube);
end;

procedure TObserverExample1Test.TestObserver;
var
  Person1, Person2: TPerson;
begin
  Person1 := TPerson.Create('John', [vtGame, vtComedy]);
  Person2 := TPerson.Create('Peter', [vtSports]);
  try
    YouTube.RegisterObserver(Person1);
    YouTube.RegisterObserver(Person2);
    YouTube.AddVideo(TVideo.Create('Video de comédia 1', vtComedy));
    YouTube.AddVideo(TVideo.Create('Video de games 1', vtGame));
    YouTube.AddVideo(TVideo.Create('Video de esportes 1', vtSports));
    YouTube.AddVideo(TVideo.Create('Video de esportes 2', vtSports));
    YouTube.AddVideo(TVideo.Create('Video de games 2', vtGame));
    YouTube.AddVideo(TVideo.Create('Video de comédia 2', vtComedy));
    CheckEquals('YouTube Videos'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 1'+sLineBreak+
                'VideoType: vtComedy'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 1'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 1'+sLineBreak+
                'VideoType: vtSports'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 2'+sLineBreak+
                'VideoType: vtSports'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 2'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 2'+sLineBreak+
                'VideoType: vtComedy', YouTube.GetVideosList);
    CheckEquals('Videos of "John"'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 1'+sLineBreak+
                'VideoType: vtComedy'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 1'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 2'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 2'+sLineBreak+
                'VideoType: vtComedy', Person1.GetVideosList);
    CheckEquals('Videos of "Peter"'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 1'+sLineBreak+
                'VideoType: vtSports'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 2'+sLineBreak+
                'VideoType: vtSports', Person2.GetVideosList);
    YouTube.UnregisterObserver(Person1);
    YouTube.AddVideo(TVideo.Create('Video de games 3', vtGame));
    CheckEquals('YouTube Videos'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 1'+sLineBreak+
                'VideoType: vtComedy'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 1'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 1'+sLineBreak+
                'VideoType: vtSports'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de esportes 2'+sLineBreak+
                'VideoType: vtSports'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 2'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 2'+sLineBreak+
                'VideoType: vtComedy'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 3'+sLineBreak+
                'VideoType: vtGame', YouTube.GetVideosList);
    CheckEquals('Videos of "John"'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 1'+sLineBreak+
                'VideoType: vtComedy'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 1'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de games 2'+sLineBreak+
                'VideoType: vtGame'+sLineBreak+
                '=========='+sLineBreak+
                'Name: Video de comédia 2'+sLineBreak+
                'VideoType: vtComedy', Person1.GetVideosList);
  finally
    Person1.Free;
    Person2.Free;
  end;
end;

{ TFactoryTest }

procedure TFactoryExample1Test.TestFactory;
var
  Vehicle: TVehicle;
begin
  Vehicle := TVehicleFactory.GetVehicle(vCar);
  CheckEquals('I''m a car.', Vehicle.GetName, 'Error on get car vehicle');
  Vehicle.Free;
  Vehicle := TVehicleFactory.GetVehicle(vBus);
  CheckEquals('I''m a bus.', Vehicle.GetName, 'Error on get bus vehicle');
  Vehicle.Free;
  Vehicle := TVehicleFactory.GetVehicle(vBicycle);
  CheckEquals('I''m a bicycle.', Vehicle.GetName, 'Error on get bicycle vehicle');
  Vehicle.Free;
end;

{ TSingletonTest }

procedure TSingletonTest.TestSingleton;
begin
  TSingleton<TStringList>.Instance.Add('foo, bar, qux');
  CheckEquals('foo, bar, qux', Trim(TSingleton<TStringList>.Instance.Text), 'Error on compare text');
end;

{ TDecoratorExample1Test }

procedure TDecoratorExample1Test.TestDecoratorExample1;
var
  Pizza: IPizza;
begin
  Pizza := TPlainPizza.Create;
  CheckEquals(4.00, Pizza.Cost, 'Error on pizza cost');
  CheckEquals('Thin dough', Pizza.Description, 'Error on pizza description');

  Pizza := TMozzarella.Create(Pizza);
  CheckEquals(4.50, Pizza.Cost, 'Error on pizza cost');
  CheckEquals('Thin dough, mozzarella', Pizza.Description, 'Error on pizza description');

  Pizza := TThreeCheese.Create(Pizza);
  CheckEquals(15.00, Pizza.Cost, 'Error on pizza cost');
  CheckEquals('Thin dough, mozzarella, mozzarella, fontina, parmesan cheese pizza', Pizza.Description, 'Error on pizza description');
end;

initialization
  RegisterTests([TSmartPointerTest.Suite,
                 TStrategyExample1Test.Suite,
                 TObserverExample1Test.Suite,
                 TFactoryExample1Test.Suite,
                 TSingletonTest.Suite,
                 TDecoratorExample1Test.Suite]);
end.